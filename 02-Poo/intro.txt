Java não é puramente orientado a objeto, você também pode programar de forma imperativa e vai funcionar

são linguagens orientadas a objeto, mas não são puramente a orientadas a objeto

Em java é possivel trabalhar com strings como se fosse um tipo primitivo;

mas ele não é, ele na verdade é um objeto


é possivel concatenar strings

Um programa java chegue a seguinte estrutura

1. vamos escrever o package

// Pacote ao qual a class pertence, nada mais que uma pasta, para você dividir o seu código

package pacote;

2. importação
// semelhando ao #include do C
import <classe_a_ser_importada>

3 .executar a função main
// ela sempre está dentro de uma classe

public class NomeDaClass {
    public static void main(String[] args) {
	

    }
}

o workspace é onde a minha ide vai salvar 

Classe é um tipo estruturado que pode conter membros
	atributos(dados/campos)
	metodos (função/ operações

Triangle vai ser um tipo

se eu fazer Triangle x = new Triangle();

o x vai ser apenas uma referência para a clas que está lá no heap
Classe é definição de um tipo

Reaproveitamos código, E delegamos responsabilidades
Os obejtos são instâncias da class

Toda classe em java é uma subclasse da class object

Object possui os seguintes métodos:

getClass - Retorna o tipo do método 
equals - Compara se o objeto é igual a outro
HashCode - Retorna um código hash do objeto
toString = converte o objeto para string

As classes possuem membros que podem ser atributos e métodos

Membros estáticos são membros de classe, em oposição a membro de instância

Eles não precisam de objetos para serem chamados	

Usaremos muito em classes utilitarias , o Math é o nome da class , no Math.sqrt

declaração de constantes também é classe de membro estáticos

a palavra final diz que ele é uma constante

Dentro da mesma classe você não pode acessar um método estático, se tiver outros métodos não estáticos

statico é quando não precisa de objeto para serem chamados, pois eles não irão mudar o seu resultado depenednedo do objeto.

Exemplo se eu tiver uma calculadora 1 e fazer a soma de 5 + 5
E se eu tiver uma calculadora 2 e fizer a soma de 5 + 5
eles não irão mudar. 
Então eu não preciso instanciar um objeto, e posso chamara o método ou variável utilizando a própria classe

----- Construtor -----
é uam operação especial da classe, que executa no momento da instanciação do objeto, vai ser executado quando for utitlizado o coamdno newx

Usos comuns:
	para permitir ou obrigar o objeto receba dados / dependências no momento de sua instânciação 
	iniciar valores dos atributos	

é posivel especificar mais de um construtor na mesma classe (sobrecarga)
this pe referência para o proprio objeto

Sobrecarga é um recurso que uma classe possui de oferecer mais de uma operação com o mesmo nome, poém com diferentes lista de parâmetros, você disponibilizar diferentes versões de um programa com oseus paramentos

Encapsulamento é um principo que consiste em esconder detalhes de implementação de uma classe, expondo apenas operações seguras e que mantenham os objetos em um estado consistente.

O objeto deve sempre estar em um estado consistente e a própria classe deve garantir isso.

É tipo um aparelho de som, ele tem toda a sua capa exterior para esconder os seus fios e circuitos, para não ter perigo do usuário ter poder de danificar o aparelho. O usuário só vai poder fazer o que está no exterior. O interno ele não vai ter acesso

Vou esconder detalhes de implementação na minha classe e vou expor apenas operações seguras e que mantenham os objetos em um estado consistente

Um objeto não deve expor nenhum atributo

Os atributos devem ser acessado por atributos get e set

---- modificadores de acesso

O private o membro só pode ser acessado no mesmo pacote, bem como em subclasses de pacotes diferentes

se não colocar nada o membro só podera acessado, dentro do mesmo pacote

protected o membro só pode ser acessado no mesmo pacote, bem como em subclasses de pacotes diferentes
		
----- tipo referencia vs tipo valor ---------

classes são tipo referência em java

Variáveis cujo tipo são classes não devem ser entedidas como caixas, mas sim "Tentáculos" (ponteiro) para caixas	

Product p1, p2;
p1 = new Product("TV", 900.0, 0);

p1, p2 estão armazenadas em um local na memória chamada stack e dentro das variáveis está o endereço de memória do objeto que foi criado dentro do heap, e esse endereço aponto para esse objeto do heap

O heap é onde são alocados os objetos em tempo de execução

se eu fizer p2 = p1;

tanto o p2 e o p1 vão apontar para o objeto

em java tipos primitivos são tipo valor, eles são caixa e não ponteiros


Objetos não utilizados são deslocados em um momento próximo pelo gargabe collactor

---- Garbage collector

é o processo que automatiza o gerenciamento de memória de um programa em execução

O garbage collector monitora os objetos alocados dinamicamente pelo programa (no heap), deslocando aqueles que não estão mais sendo utilizados.

o Garbage collaction monitora os objetos alocados dinamicamente pelo programa (no heap), deslocando aqueles que não estão mais sendo utilizados.

------- Boxing, unboxing, wrapper classes


Boxing é o processo de conversão de um objeto tipo valor para um objeto tipo referencia

Os wrapper classes são classes equivalente aos tipos primitivos

int = Integer, char = Character, esse é o que mais muda, os outros só ficam com letra maiscula no começo

é melhor utilizar o wrapper classe do que o tipo primitivo, pois o wrapper class aceita o valor nulo

for each em java :

for(int elemento : lista) {
     System.out.println(elemento);
}

--- Listas 

Lista é uma estrutura de dados
ordenada, homogênia, e os seus elementos são alocados sob demanda, diferente do vetor que você tem que informar quantos elementos vai ter

List em java é um tipo Interface

se um tipo é interface eu não posso instanciar esse tipo

Classes que implementam: ArrayList, LikedList

------------- Enumeração --------------------


Enumeração é um tipo especial que serve para especificar de forma literal um conjunto de constantes relacionadas

Conjunto de valores pré-definidos, ou seja, 

enum

vantagem - melhor semântica e legivel	

enumeradores são considerados tipo uma constante no java, mas ele são muito mais do que isso

vamos ver a diferença de enum para constantes

Usamos tipos de enumeração sempre que precisamos representas um conjunto fixo de constantes, valores que são totalmente conhecidos na hora da compilação do programa;

Exemplos comuns: variáveis para armazernar meses do ano, dias da semana, pontos cardeais, estações do ano, planetas do sistemas solar, etc;

------------ composição

Podemos pensar nas classes como categorias

views - tela do sistema
controllers - é o que faz entre a tela e o sistema
Entities - produtos, clientes, pedidos
Services - 
Repositories - acessar os dados de um banco de dados

Composição é um tipo de associação que permite que um objeto contenha outro


Relação tem-um ou tem-varios

Vantagens
- Organização
- Coesão
- Flexibilidade
- Reuso

----------- Herança -------------------

é um tipo de associação que permite que uma classe herde todos dados e comportamentos de outra

Vantagens
- Reuso
- Polimorfismo

se uma classe tem tudo que uma outra tem, mais/ou não  outras coisas, ai você pode usar herança para extender para ela

o modificador de acesso protected ele fica acessivel também em pacotes diferente porem tem que ser uma subclasse, ou seja, ele tem que pegar a herança de uma superclasse

Já o private diz que o membro só pode ser acessado pela própria classe account

A herança é uma relação é um

Herança é uma associação entre classes e não entre objetos

----- Upcasting
é como se eu tivesse um objeto do tipo businessaccount e quisesse atribuir a uma variável do tipo account
Casting da subclasse para a superclasse
Uso comum: Polimorfismo

----- DownCasting 
é o ao contrário

métodos que recebem parâmetros genéricos(Ex: Equals)

---------- Sobreposição ou sobrescrita

é a implementação de um método de uma superclasse na subclasse

é fortemente recomendável usar anotação @Override em um método sobrescrito

- Facilita a leitura e compreensão do código
- Avisamos ao compilador (boa prática)

a palavra chave final utilizada em classe evita que a classe seja herdada
public final class SavingsAccount

no método evita que o método sob seja sobreposto

Se você já tem um método que já é sobreposto normalmente você vai colocar um final para ele não ser sobreposto, porém depende da regra do negócio


----- Os pilares da POO

- Encapsulamento

- Herança

- Polimorfismo = Em poo, polimorfismo é recurso que permite que variáveis de um mesmo tipo mais genérico possam apontar para objetos de tipos específicos diferentes, tendo assim comportamento diferentes conforme cada tipo específico;

Polimorfismo - poli = muitos; morfismo = formas

então vamos ter variáveis do mesmo tipos se comportando de varias formas diferentes

----------- Classes abstratas

São classes que não pode ser instanciadas
é uma forma de garantir herança total, ou seja, somente classes não abstratas pode ser instanciadas, mas nunca a superclasse abstrata


na uml para saber que uma classe é abstrata o nome dela é abstrata

----------- Métodos abstratos

se uma classe possui apenas um método abstrato ela é abstrata

Quando eu for querer fazer uma list e quero fazer também um polimorfismo, eu devo colocar o tipo da lista como o tipo da superclasse